"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _foundationalStyles = require("./foundational-styles");

var _typography = require("./typography");

var _componentSpecific = require("./component-specific");

var _themeHelpers = require("./theme-helpers");

/**
 * Theme
 * ---
 * The theme object is used to style Evergreen.
 * It is passed into the  `<ThemeProvider theme={theme} />`.
 * ----
 * You can use this as a template for your own themes.
 */

/**
 * Foundational Styles.
 * ---
 * The following properties are NOT REQUIRED by Evergreen.
 * It's exposed for convenience and documentation.
 */

/**
 * Typography.
 * ---
 * The following properties are NOT REQUIRED by Evergreen.
 * It's exposed for convenience and documentation.
 */

/**
 * Component Specific.
 * ---
 * These ARE REQUIRED for Evergreen to work.
 */

/**
 * Theme Helpers.
 * ---
 * These ARE REQUIRED for Evergreen to work.
 */
var _default = {
  // Foundational Styles.
  colors: _foundationalStyles.colors,
  elevations: _foundationalStyles.elevations,
  fills: _foundationalStyles.fills,
  palette: _foundationalStyles.palette,
  scales: _foundationalStyles.scales,
  // Component Specific.
  avatarColors: _componentSpecific.avatarColors,
  badgeColors: _componentSpecific.badgeColors,
  spinnerColor: _componentSpecific.spinnerColor,
  overlayBackgroundColor: _componentSpecific.overlayBackgroundColor,
  getBadgeClassName: _componentSpecific.getBadgeClassName,
  getButtonClassName: _componentSpecific.getButtonClassName,
  getLinkClassName: _componentSpecific.getLinkClassName,
  getCheckboxClassName: _componentSpecific.getCheckboxClassName,
  getRadioClassName: _componentSpecific.getRadioClassName,
  getTagInputClassName: _componentSpecific.getTagInputClassName,
  getTextInputClassName: _componentSpecific.getTextInputClassName,
  getTextareaClassName: _componentSpecific.getTextareaClassName,
  getTextDropdownButtonClassName: _componentSpecific.getTextDropdownButtonClassName,
  getTabClassName: _componentSpecific.getTabClassName,
  getTableCellClassName: _componentSpecific.getTableCellClassName,
  getTooltipProps: _componentSpecific.getTooltipProps,
  getRowClassName: _componentSpecific.getRowClassName,
  getMenuItemClassName: _componentSpecific.getMenuItemClassName,
  getSelectClassName: _componentSpecific.getSelectClassName,
  getSegmentedControlRadioClassName: _componentSpecific.getSegmentedControlRadioClassName,
  getSwitchClassName: _componentSpecific.getSwitchClassName,
  getAlertProps: _componentSpecific.getAlertProps,
  getCodeProps: _componentSpecific.getCodeProps,
  getAvatarProps: _componentSpecific.getAvatarProps,
  getBadgeProps: _componentSpecific.getBadgeProps,
  getAvatarInitialsFontSize: _componentSpecific.getAvatarInitialsFontSize,
  // Theme Helpers.
  getBorderRadiusForControlHeight: _themeHelpers.getBorderRadiusForControlHeight,
  getTextSizeForControlHeight: _themeHelpers.getTextSizeForControlHeight,
  getIconSizeForButton: _themeHelpers.getIconSizeForButton,
  getIconSizeForInput: _themeHelpers.getIconSizeForInput,
  getIconSizeForSelect: _themeHelpers.getIconSizeForSelect,
  getIconSizeForIconButton: _themeHelpers.getIconSizeForIconButton,
  getBackground: _themeHelpers.getBackground,
  getElevation: _themeHelpers.getElevation,
  getIconColor: _themeHelpers.getIconColor,
  getIconForIntent: _themeHelpers.getIconForIntent,
  getHeadingStyle: _themeHelpers.getHeadingStyle,
  getTextStyle: _themeHelpers.getTextStyle,
  getParagraphStyle: _themeHelpers.getParagraphStyle,
  getFontFamily: _themeHelpers.getFontFamily,
  getTextColor: _themeHelpers.getTextColor,
  typography: {
    headings: _typography.headings,
    text: _typography.text,
    fontFamilies: _typography.fontFamilies,
    paragraph: _typography.paragraph
  }
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb2xvcnMiLCJlbGV2YXRpb25zIiwiZmlsbHMiLCJwYWxldHRlIiwic2NhbGVzIiwiYXZhdGFyQ29sb3JzIiwiYmFkZ2VDb2xvcnMiLCJzcGlubmVyQ29sb3IiLCJvdmVybGF5QmFja2dyb3VuZENvbG9yIiwiZ2V0QmFkZ2VDbGFzc05hbWUiLCJnZXRCdXR0b25DbGFzc05hbWUiLCJnZXRMaW5rQ2xhc3NOYW1lIiwiZ2V0Q2hlY2tib3hDbGFzc05hbWUiLCJnZXRSYWRpb0NsYXNzTmFtZSIsImdldFRhZ0lucHV0Q2xhc3NOYW1lIiwiZ2V0VGV4dElucHV0Q2xhc3NOYW1lIiwiZ2V0VGV4dGFyZWFDbGFzc05hbWUiLCJnZXRUZXh0RHJvcGRvd25CdXR0b25DbGFzc05hbWUiLCJnZXRUYWJDbGFzc05hbWUiLCJnZXRUYWJsZUNlbGxDbGFzc05hbWUiLCJnZXRUb29sdGlwUHJvcHMiLCJnZXRSb3dDbGFzc05hbWUiLCJnZXRNZW51SXRlbUNsYXNzTmFtZSIsImdldFNlbGVjdENsYXNzTmFtZSIsImdldFNlZ21lbnRlZENvbnRyb2xSYWRpb0NsYXNzTmFtZSIsImdldFN3aXRjaENsYXNzTmFtZSIsImdldEFsZXJ0UHJvcHMiLCJnZXRDb2RlUHJvcHMiLCJnZXRBdmF0YXJQcm9wcyIsImdldEJhZGdlUHJvcHMiLCJnZXRBdmF0YXJJbml0aWFsc0ZvbnRTaXplIiwiZ2V0Qm9yZGVyUmFkaXVzRm9yQ29udHJvbEhlaWdodCIsImdldFRleHRTaXplRm9yQ29udHJvbEhlaWdodCIsImdldEljb25TaXplRm9yQnV0dG9uIiwiZ2V0SWNvblNpemVGb3JJbnB1dCIsImdldEljb25TaXplRm9yU2VsZWN0IiwiZ2V0SWNvblNpemVGb3JJY29uQnV0dG9uIiwiZ2V0QmFja2dyb3VuZCIsImdldEVsZXZhdGlvbiIsImdldEljb25Db2xvciIsImdldEljb25Gb3JJbnRlbnQiLCJnZXRIZWFkaW5nU3R5bGUiLCJnZXRUZXh0U3R5bGUiLCJnZXRQYXJhZ3JhcGhTdHlsZSIsImdldEZvbnRGYW1pbHkiLCJnZXRUZXh0Q29sb3IiLCJ0eXBvZ3JhcGh5IiwiaGVhZGluZ3MiLCJ0ZXh0IiwiZm9udEZhbWlsaWVzIiwicGFyYWdyYXBoIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3RoZW1lL3NyYy9kZWZhdWx0LXRoZW1lL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlbWVcbiAqIC0tLVxuICogVGhlIHRoZW1lIG9iamVjdCBpcyB1c2VkIHRvIHN0eWxlIEV2ZXJncmVlbi5cbiAqIEl0IGlzIHBhc3NlZCBpbnRvIHRoZSAgYDxUaGVtZVByb3ZpZGVyIHRoZW1lPXt0aGVtZX0gLz5gLlxuICogLS0tLVxuICogWW91IGNhbiB1c2UgdGhpcyBhcyBhIHRlbXBsYXRlIGZvciB5b3VyIG93biB0aGVtZXMuXG4gKi9cblxuLyoqXG4gKiBGb3VuZGF0aW9uYWwgU3R5bGVzLlxuICogLS0tXG4gKiBUaGUgZm9sbG93aW5nIHByb3BlcnRpZXMgYXJlIE5PVCBSRVFVSVJFRCBieSBFdmVyZ3JlZW4uXG4gKiBJdCdzIGV4cG9zZWQgZm9yIGNvbnZlbmllbmNlIGFuZCBkb2N1bWVudGF0aW9uLlxuICovXG5pbXBvcnQge1xuICBjb2xvcnMsXG4gIGVsZXZhdGlvbnMsXG4gIGZpbGxzLFxuICBwYWxldHRlLFxuICBzY2FsZXNcbn0gZnJvbSAnLi9mb3VuZGF0aW9uYWwtc3R5bGVzJ1xuXG4vKipcbiAqIFR5cG9ncmFwaHkuXG4gKiAtLS1cbiAqIFRoZSBmb2xsb3dpbmcgcHJvcGVydGllcyBhcmUgTk9UIFJFUVVJUkVEIGJ5IEV2ZXJncmVlbi5cbiAqIEl0J3MgZXhwb3NlZCBmb3IgY29udmVuaWVuY2UgYW5kIGRvY3VtZW50YXRpb24uXG4gKi9cbmltcG9ydCB7IGhlYWRpbmdzLCB0ZXh0LCBmb250RmFtaWxpZXMsIHBhcmFncmFwaCB9IGZyb20gJy4vdHlwb2dyYXBoeSdcblxuLyoqXG4gKiBDb21wb25lbnQgU3BlY2lmaWMuXG4gKiAtLS1cbiAqIFRoZXNlIEFSRSBSRVFVSVJFRCBmb3IgRXZlcmdyZWVuIHRvIHdvcmsuXG4gKi9cbmltcG9ydCB7XG4gIGF2YXRhckNvbG9ycyxcbiAgYmFkZ2VDb2xvcnMsXG4gIHNwaW5uZXJDb2xvcixcbiAgb3ZlcmxheUJhY2tncm91bmRDb2xvcixcbiAgZ2V0QmFkZ2VDbGFzc05hbWUsXG4gIGdldEJ1dHRvbkNsYXNzTmFtZSxcbiAgZ2V0TGlua0NsYXNzTmFtZSxcbiAgZ2V0Q2hlY2tib3hDbGFzc05hbWUsXG4gIGdldFJhZGlvQ2xhc3NOYW1lLFxuICBnZXRUYWdJbnB1dENsYXNzTmFtZSxcbiAgZ2V0VGV4dElucHV0Q2xhc3NOYW1lLFxuICBnZXRUZXh0YXJlYUNsYXNzTmFtZSxcbiAgZ2V0VGV4dERyb3Bkb3duQnV0dG9uQ2xhc3NOYW1lLFxuICBnZXRUYWJDbGFzc05hbWUsXG4gIGdldFRhYmxlQ2VsbENsYXNzTmFtZSxcbiAgZ2V0VG9vbHRpcFByb3BzLFxuICBnZXRSb3dDbGFzc05hbWUsXG4gIGdldE1lbnVJdGVtQ2xhc3NOYW1lLFxuICBnZXRTZWxlY3RDbGFzc05hbWUsXG4gIGdldFNlZ21lbnRlZENvbnRyb2xSYWRpb0NsYXNzTmFtZSxcbiAgZ2V0U3dpdGNoQ2xhc3NOYW1lLFxuICBnZXRBbGVydFByb3BzLFxuICBnZXRDb2RlUHJvcHMsXG4gIGdldEF2YXRhclByb3BzLFxuICBnZXRCYWRnZVByb3BzLFxuICBnZXRBdmF0YXJJbml0aWFsc0ZvbnRTaXplXG59IGZyb20gJy4vY29tcG9uZW50LXNwZWNpZmljJ1xuXG4vKipcbiAqIFRoZW1lIEhlbHBlcnMuXG4gKiAtLS1cbiAqIFRoZXNlIEFSRSBSRVFVSVJFRCBmb3IgRXZlcmdyZWVuIHRvIHdvcmsuXG4gKi9cbmltcG9ydCB7XG4gIGdldEJvcmRlclJhZGl1c0ZvckNvbnRyb2xIZWlnaHQsXG4gIGdldFRleHRTaXplRm9yQ29udHJvbEhlaWdodCxcbiAgZ2V0SWNvblNpemVGb3JCdXR0b24sXG4gIGdldEljb25TaXplRm9ySW5wdXQsXG4gIGdldEljb25TaXplRm9yU2VsZWN0LFxuICBnZXRJY29uU2l6ZUZvckljb25CdXR0b24sXG4gIGdldEJhY2tncm91bmQsXG4gIGdldEVsZXZhdGlvbixcbiAgZ2V0SWNvbkNvbG9yLFxuICBnZXRJY29uRm9ySW50ZW50LFxuICBnZXRIZWFkaW5nU3R5bGUsXG4gIGdldFRleHRTdHlsZSxcbiAgZ2V0UGFyYWdyYXBoU3R5bGUsXG4gIGdldEZvbnRGYW1pbHksXG4gIGdldFRleHRDb2xvclxufSBmcm9tICcuL3RoZW1lLWhlbHBlcnMnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgLy8gRm91bmRhdGlvbmFsIFN0eWxlcy5cbiAgY29sb3JzLFxuICBlbGV2YXRpb25zLFxuICBmaWxscyxcbiAgcGFsZXR0ZSxcbiAgc2NhbGVzLFxuXG4gIC8vIENvbXBvbmVudCBTcGVjaWZpYy5cbiAgYXZhdGFyQ29sb3JzLFxuICBiYWRnZUNvbG9ycyxcbiAgc3Bpbm5lckNvbG9yLFxuICBvdmVybGF5QmFja2dyb3VuZENvbG9yLFxuICBnZXRCYWRnZUNsYXNzTmFtZSxcbiAgZ2V0QnV0dG9uQ2xhc3NOYW1lLFxuICBnZXRMaW5rQ2xhc3NOYW1lLFxuICBnZXRDaGVja2JveENsYXNzTmFtZSxcbiAgZ2V0UmFkaW9DbGFzc05hbWUsXG4gIGdldFRhZ0lucHV0Q2xhc3NOYW1lLFxuICBnZXRUZXh0SW5wdXRDbGFzc05hbWUsXG4gIGdldFRleHRhcmVhQ2xhc3NOYW1lLFxuICBnZXRUZXh0RHJvcGRvd25CdXR0b25DbGFzc05hbWUsXG4gIGdldFRhYkNsYXNzTmFtZSxcbiAgZ2V0VGFibGVDZWxsQ2xhc3NOYW1lLFxuICBnZXRUb29sdGlwUHJvcHMsXG4gIGdldFJvd0NsYXNzTmFtZSxcbiAgZ2V0TWVudUl0ZW1DbGFzc05hbWUsXG4gIGdldFNlbGVjdENsYXNzTmFtZSxcbiAgZ2V0U2VnbWVudGVkQ29udHJvbFJhZGlvQ2xhc3NOYW1lLFxuICBnZXRTd2l0Y2hDbGFzc05hbWUsXG4gIGdldEFsZXJ0UHJvcHMsXG4gIGdldENvZGVQcm9wcyxcbiAgZ2V0QXZhdGFyUHJvcHMsXG4gIGdldEJhZGdlUHJvcHMsXG4gIGdldEF2YXRhckluaXRpYWxzRm9udFNpemUsXG5cbiAgLy8gVGhlbWUgSGVscGVycy5cbiAgZ2V0Qm9yZGVyUmFkaXVzRm9yQ29udHJvbEhlaWdodCxcbiAgZ2V0VGV4dFNpemVGb3JDb250cm9sSGVpZ2h0LFxuICBnZXRJY29uU2l6ZUZvckJ1dHRvbixcbiAgZ2V0SWNvblNpemVGb3JJbnB1dCxcbiAgZ2V0SWNvblNpemVGb3JTZWxlY3QsXG4gIGdldEljb25TaXplRm9ySWNvbkJ1dHRvbixcbiAgZ2V0QmFja2dyb3VuZCxcbiAgZ2V0RWxldmF0aW9uLFxuICBnZXRJY29uQ29sb3IsXG4gIGdldEljb25Gb3JJbnRlbnQsXG4gIGdldEhlYWRpbmdTdHlsZSxcbiAgZ2V0VGV4dFN0eWxlLFxuICBnZXRQYXJhZ3JhcGhTdHlsZSxcbiAgZ2V0Rm9udEZhbWlseSxcbiAgZ2V0VGV4dENvbG9yLFxuXG4gIHR5cG9ncmFwaHk6IHtcbiAgICBoZWFkaW5ncyxcbiAgICB0ZXh0LFxuICAgIGZvbnRGYW1pbGllcyxcbiAgICBwYXJhZ3JhcGhcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBZUE7O0FBY0E7O0FBT0E7O0FBa0NBOztBQXRFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUE4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtlQW1CZTtFQUNiO0VBQ0FBLE1BQU0sRUFBTkEsMEJBRmE7RUFHYkMsVUFBVSxFQUFWQSw4QkFIYTtFQUliQyxLQUFLLEVBQUxBLHlCQUphO0VBS2JDLE9BQU8sRUFBUEEsMkJBTGE7RUFNYkMsTUFBTSxFQUFOQSwwQkFOYTtFQVFiO0VBQ0FDLFlBQVksRUFBWkEsK0JBVGE7RUFVYkMsV0FBVyxFQUFYQSw4QkFWYTtFQVdiQyxZQUFZLEVBQVpBLCtCQVhhO0VBWWJDLHNCQUFzQixFQUF0QkEseUNBWmE7RUFhYkMsaUJBQWlCLEVBQWpCQSxvQ0FiYTtFQWNiQyxrQkFBa0IsRUFBbEJBLHFDQWRhO0VBZWJDLGdCQUFnQixFQUFoQkEsbUNBZmE7RUFnQmJDLG9CQUFvQixFQUFwQkEsdUNBaEJhO0VBaUJiQyxpQkFBaUIsRUFBakJBLG9DQWpCYTtFQWtCYkMsb0JBQW9CLEVBQXBCQSx1Q0FsQmE7RUFtQmJDLHFCQUFxQixFQUFyQkEsd0NBbkJhO0VBb0JiQyxvQkFBb0IsRUFBcEJBLHVDQXBCYTtFQXFCYkMsOEJBQThCLEVBQTlCQSxpREFyQmE7RUFzQmJDLGVBQWUsRUFBZkEsa0NBdEJhO0VBdUJiQyxxQkFBcUIsRUFBckJBLHdDQXZCYTtFQXdCYkMsZUFBZSxFQUFmQSxrQ0F4QmE7RUF5QmJDLGVBQWUsRUFBZkEsa0NBekJhO0VBMEJiQyxvQkFBb0IsRUFBcEJBLHVDQTFCYTtFQTJCYkMsa0JBQWtCLEVBQWxCQSxxQ0EzQmE7RUE0QmJDLGlDQUFpQyxFQUFqQ0Esb0RBNUJhO0VBNkJiQyxrQkFBa0IsRUFBbEJBLHFDQTdCYTtFQThCYkMsYUFBYSxFQUFiQSxnQ0E5QmE7RUErQmJDLFlBQVksRUFBWkEsK0JBL0JhO0VBZ0NiQyxjQUFjLEVBQWRBLGlDQWhDYTtFQWlDYkMsYUFBYSxFQUFiQSxnQ0FqQ2E7RUFrQ2JDLHlCQUF5QixFQUF6QkEsNENBbENhO0VBb0NiO0VBQ0FDLCtCQUErQixFQUEvQkEsNkNBckNhO0VBc0NiQywyQkFBMkIsRUFBM0JBLHlDQXRDYTtFQXVDYkMsb0JBQW9CLEVBQXBCQSxrQ0F2Q2E7RUF3Q2JDLG1CQUFtQixFQUFuQkEsaUNBeENhO0VBeUNiQyxvQkFBb0IsRUFBcEJBLGtDQXpDYTtFQTBDYkMsd0JBQXdCLEVBQXhCQSxzQ0ExQ2E7RUEyQ2JDLGFBQWEsRUFBYkEsMkJBM0NhO0VBNENiQyxZQUFZLEVBQVpBLDBCQTVDYTtFQTZDYkMsWUFBWSxFQUFaQSwwQkE3Q2E7RUE4Q2JDLGdCQUFnQixFQUFoQkEsOEJBOUNhO0VBK0NiQyxlQUFlLEVBQWZBLDZCQS9DYTtFQWdEYkMsWUFBWSxFQUFaQSwwQkFoRGE7RUFpRGJDLGlCQUFpQixFQUFqQkEsK0JBakRhO0VBa0RiQyxhQUFhLEVBQWJBLDJCQWxEYTtFQW1EYkMsWUFBWSxFQUFaQSwwQkFuRGE7RUFxRGJDLFVBQVUsRUFBRTtJQUNWQyxRQUFRLEVBQVJBLG9CQURVO0lBRVZDLElBQUksRUFBSkEsZ0JBRlU7SUFHVkMsWUFBWSxFQUFaQSx3QkFIVTtJQUlWQyxTQUFTLEVBQVRBO0VBSlU7QUFyREMsQyJ9