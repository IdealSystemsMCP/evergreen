import { Themer } from '../../../../themer';
import memoizeClassName from '../utils/memoizeClassName';
import scales from '../foundational-styles/scales';
import palette from '../foundational-styles/palette';
var Appearances = {};
Appearances["default"] = Themer.createInputAppearance({
  base: {
    backgroundColor: 'white',
    boxShadow: "inset 0 0 0 1px ".concat(scales.neutral.N5A, ", inset 0 1px 2px ").concat(scales.neutral.N4A)
  },
  invalid: {
    boxShadow: "inset 0 0 0 1px ".concat(palette.red.base, ", inset 0 1px 2px ").concat(scales.neutral.N4A)
  },
  placeholder: {
    color: scales.neutral.N6A
  },
  focus: {
    outline: 'none',
    boxShadow: "inset 0 0 2px ".concat(scales.neutral.N4A, ", inset 0 0 0 1px ").concat(scales.blue.B7, ", 0 0 0 3px ").concat(scales.blue.B4A)
  },
  disabled: {
    boxShadow: "inset 0 0 0 1px ".concat(scales.neutral.N4A),
    backgroundColor: scales.neutral.N2
  }
});
Appearances.neutral = Themer.createInputAppearance({
  base: {
    backgroundColor: scales.neutral.N2A
  },
  invalid: {
    boxShadow: "inset 0 0 0 1px ".concat(palette.red.base)
  },
  placeholder: {
    color: scales.neutral.N6A
  },
  focus: {
    outline: 'none',
    backgroundColor: 'white',
    boxShadow: "0 0 0 2px ".concat(scales.blue.B6A)
  },
  disabled: {
    boxShadow: "inset 0 0 0 1px ".concat(scales.neutral.N4A),
    backgroundColor: scales.neutral.N2
  }
});
Appearances.editableCell = Themer.createInputAppearance({
  base: {
    backgroundColor: scales.neutral.N2A
  },
  invalid: {
    boxShadow: "inset 0 0 0 1px ".concat(palette.red.base)
  },
  placeholder: {
    color: scales.neutral.N6A
  },
  focus: {
    outline: 'none',
    backgroundColor: 'white',
    boxShadow: "0 0 0 2px ".concat(scales.blue.B7)
  },
  disabled: {
    boxShadow: "inset 0 0 0 1px ".concat(scales.neutral.N4A),
    backgroundColor: scales.neutral.N2
  }
});
/**
 * Get the appearance of a `TextInput`.
 * @param {string} appearance
 * @return {Object} the appearance object.
 */

var getTextareaAppearance = function getTextareaAppearance(appearance) {
  switch (appearance) {
    case 'neutral':
      return Appearances.neutral;

    case 'editable-cell':
      return Appearances.editableCell;

    default:
      return Appearances["default"];
  }
};
/**
 * Get the className of a `TextInput`.
 * @param {string} appearance
 * @return {string} the appearance class name.
 */


export default memoizeClassName(getTextareaAppearance);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUaGVtZXIiLCJtZW1vaXplQ2xhc3NOYW1lIiwic2NhbGVzIiwicGFsZXR0ZSIsIkFwcGVhcmFuY2VzIiwiY3JlYXRlSW5wdXRBcHBlYXJhbmNlIiwiYmFzZSIsImJhY2tncm91bmRDb2xvciIsImJveFNoYWRvdyIsIm5ldXRyYWwiLCJONUEiLCJONEEiLCJpbnZhbGlkIiwicmVkIiwicGxhY2Vob2xkZXIiLCJjb2xvciIsIk42QSIsImZvY3VzIiwib3V0bGluZSIsImJsdWUiLCJCNyIsIkI0QSIsImRpc2FibGVkIiwiTjIiLCJOMkEiLCJCNkEiLCJlZGl0YWJsZUNlbGwiLCJnZXRUZXh0YXJlYUFwcGVhcmFuY2UiLCJhcHBlYXJhbmNlIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3RoZW1lL3NyYy9kZWZhdWx0LXRoZW1lL2NvbXBvbmVudC1zcGVjaWZpYy9nZXRUZXh0YXJlYUNsYXNzTmFtZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUaGVtZXIgfSBmcm9tICcuLi8uLi8uLi8uLi90aGVtZXInXG5pbXBvcnQgbWVtb2l6ZUNsYXNzTmFtZSBmcm9tICcuLi91dGlscy9tZW1vaXplQ2xhc3NOYW1lJ1xuaW1wb3J0IHNjYWxlcyBmcm9tICcuLi9mb3VuZGF0aW9uYWwtc3R5bGVzL3NjYWxlcydcbmltcG9ydCBwYWxldHRlIGZyb20gJy4uL2ZvdW5kYXRpb25hbC1zdHlsZXMvcGFsZXR0ZSdcblxuY29uc3QgQXBwZWFyYW5jZXMgPSB7fVxuXG5BcHBlYXJhbmNlcy5kZWZhdWx0ID0gVGhlbWVyLmNyZWF0ZUlucHV0QXBwZWFyYW5jZSh7XG4gIGJhc2U6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXG4gICAgYm94U2hhZG93OiBgaW5zZXQgMCAwIDAgMXB4ICR7c2NhbGVzLm5ldXRyYWwuTjVBfSwgaW5zZXQgMCAxcHggMnB4ICR7XG4gICAgICBzY2FsZXMubmV1dHJhbC5ONEFcbiAgICB9YFxuICB9LFxuICBpbnZhbGlkOiB7XG4gICAgYm94U2hhZG93OiBgaW5zZXQgMCAwIDAgMXB4ICR7cGFsZXR0ZS5yZWQuYmFzZX0sIGluc2V0IDAgMXB4IDJweCAke1xuICAgICAgc2NhbGVzLm5ldXRyYWwuTjRBXG4gICAgfWBcbiAgfSxcbiAgcGxhY2Vob2xkZXI6IHtcbiAgICBjb2xvcjogc2NhbGVzLm5ldXRyYWwuTjZBXG4gIH0sXG4gIGZvY3VzOiB7XG4gICAgb3V0bGluZTogJ25vbmUnLFxuICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAycHggJHtzY2FsZXMubmV1dHJhbC5ONEF9LCBpbnNldCAwIDAgMCAxcHggJHtcbiAgICAgIHNjYWxlcy5ibHVlLkI3XG4gICAgfSwgMCAwIDAgM3B4ICR7c2NhbGVzLmJsdWUuQjRBfWBcbiAgfSxcbiAgZGlzYWJsZWQ6IHtcbiAgICBib3hTaGFkb3c6IGBpbnNldCAwIDAgMCAxcHggJHtzY2FsZXMubmV1dHJhbC5ONEF9YCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHNjYWxlcy5uZXV0cmFsLk4yXG4gIH1cbn0pXG5cbkFwcGVhcmFuY2VzLm5ldXRyYWwgPSBUaGVtZXIuY3JlYXRlSW5wdXRBcHBlYXJhbmNlKHtcbiAgYmFzZToge1xuICAgIGJhY2tncm91bmRDb2xvcjogc2NhbGVzLm5ldXRyYWwuTjJBXG4gIH0sXG4gIGludmFsaWQ6IHtcbiAgICBib3hTaGFkb3c6IGBpbnNldCAwIDAgMCAxcHggJHtwYWxldHRlLnJlZC5iYXNlfWBcbiAgfSxcbiAgcGxhY2Vob2xkZXI6IHtcbiAgICBjb2xvcjogc2NhbGVzLm5ldXRyYWwuTjZBXG4gIH0sXG4gIGZvY3VzOiB7XG4gICAgb3V0bGluZTogJ25vbmUnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICBib3hTaGFkb3c6IGAwIDAgMCAycHggJHtzY2FsZXMuYmx1ZS5CNkF9YFxuICB9LFxuICBkaXNhYmxlZDoge1xuICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAwIDFweCAke3NjYWxlcy5uZXV0cmFsLk40QX1gLFxuICAgIGJhY2tncm91bmRDb2xvcjogc2NhbGVzLm5ldXRyYWwuTjJcbiAgfVxufSlcblxuQXBwZWFyYW5jZXMuZWRpdGFibGVDZWxsID0gVGhlbWVyLmNyZWF0ZUlucHV0QXBwZWFyYW5jZSh7XG4gIGJhc2U6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHNjYWxlcy5uZXV0cmFsLk4yQVxuICB9LFxuICBpbnZhbGlkOiB7XG4gICAgYm94U2hhZG93OiBgaW5zZXQgMCAwIDAgMXB4ICR7cGFsZXR0ZS5yZWQuYmFzZX1gXG4gIH0sXG4gIHBsYWNlaG9sZGVyOiB7XG4gICAgY29sb3I6IHNjYWxlcy5uZXV0cmFsLk42QVxuICB9LFxuICBmb2N1czoge1xuICAgIG91dGxpbmU6ICdub25lJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXG4gICAgYm94U2hhZG93OiBgMCAwIDAgMnB4ICR7c2NhbGVzLmJsdWUuQjd9YFxuICB9LFxuICBkaXNhYmxlZDoge1xuICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAwIDFweCAke3NjYWxlcy5uZXV0cmFsLk40QX1gLFxuICAgIGJhY2tncm91bmRDb2xvcjogc2NhbGVzLm5ldXRyYWwuTjJcbiAgfVxufSlcblxuLyoqXG4gKiBHZXQgdGhlIGFwcGVhcmFuY2Ugb2YgYSBgVGV4dElucHV0YC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBlYXJhbmNlXG4gKiBAcmV0dXJuIHtPYmplY3R9IHRoZSBhcHBlYXJhbmNlIG9iamVjdC5cbiAqL1xuY29uc3QgZ2V0VGV4dGFyZWFBcHBlYXJhbmNlID0gYXBwZWFyYW5jZSA9PiB7XG4gIHN3aXRjaCAoYXBwZWFyYW5jZSkge1xuICAgIGNhc2UgJ25ldXRyYWwnOlxuICAgICAgcmV0dXJuIEFwcGVhcmFuY2VzLm5ldXRyYWxcbiAgICBjYXNlICdlZGl0YWJsZS1jZWxsJzpcbiAgICAgIHJldHVybiBBcHBlYXJhbmNlcy5lZGl0YWJsZUNlbGxcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIEFwcGVhcmFuY2VzLmRlZmF1bHRcbiAgfVxufVxuXG4vKipcbiAqIEdldCB0aGUgY2xhc3NOYW1lIG9mIGEgYFRleHRJbnB1dGAuXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwZWFyYW5jZVxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgYXBwZWFyYW5jZSBjbGFzcyBuYW1lLlxuICovXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplQ2xhc3NOYW1lKGdldFRleHRhcmVhQXBwZWFyYW5jZSlcbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsTUFBVCxRQUF1QixvQkFBdkI7QUFDQSxPQUFPQyxnQkFBUCxNQUE2QiwyQkFBN0I7QUFDQSxPQUFPQyxNQUFQLE1BQW1CLCtCQUFuQjtBQUNBLE9BQU9DLE9BQVAsTUFBb0IsZ0NBQXBCO0FBRUEsSUFBTUMsV0FBVyxHQUFHLEVBQXBCO0FBRUFBLFdBQVcsV0FBWCxHQUFzQkosTUFBTSxDQUFDSyxxQkFBUCxDQUE2QjtFQUNqREMsSUFBSSxFQUFFO0lBQ0pDLGVBQWUsRUFBRSxPQURiO0lBRUpDLFNBQVMsNEJBQXFCTixNQUFNLENBQUNPLE9BQVAsQ0FBZUMsR0FBcEMsK0JBQ1BSLE1BQU0sQ0FBQ08sT0FBUCxDQUFlRSxHQURSO0VBRkwsQ0FEMkM7RUFPakRDLE9BQU8sRUFBRTtJQUNQSixTQUFTLDRCQUFxQkwsT0FBTyxDQUFDVSxHQUFSLENBQVlQLElBQWpDLCtCQUNQSixNQUFNLENBQUNPLE9BQVAsQ0FBZUUsR0FEUjtFQURGLENBUHdDO0VBWWpERyxXQUFXLEVBQUU7SUFDWEMsS0FBSyxFQUFFYixNQUFNLENBQUNPLE9BQVAsQ0FBZU87RUFEWCxDQVpvQztFQWVqREMsS0FBSyxFQUFFO0lBQ0xDLE9BQU8sRUFBRSxNQURKO0lBRUxWLFNBQVMsMEJBQW1CTixNQUFNLENBQUNPLE9BQVAsQ0FBZUUsR0FBbEMsK0JBQ1BULE1BQU0sQ0FBQ2lCLElBQVAsQ0FBWUMsRUFETCx5QkFFTWxCLE1BQU0sQ0FBQ2lCLElBQVAsQ0FBWUUsR0FGbEI7RUFGSixDQWYwQztFQXFCakRDLFFBQVEsRUFBRTtJQUNSZCxTQUFTLDRCQUFxQk4sTUFBTSxDQUFDTyxPQUFQLENBQWVFLEdBQXBDLENBREQ7SUFFUkosZUFBZSxFQUFFTCxNQUFNLENBQUNPLE9BQVAsQ0FBZWM7RUFGeEI7QUFyQnVDLENBQTdCLENBQXRCO0FBMkJBbkIsV0FBVyxDQUFDSyxPQUFaLEdBQXNCVCxNQUFNLENBQUNLLHFCQUFQLENBQTZCO0VBQ2pEQyxJQUFJLEVBQUU7SUFDSkMsZUFBZSxFQUFFTCxNQUFNLENBQUNPLE9BQVAsQ0FBZWU7RUFENUIsQ0FEMkM7RUFJakRaLE9BQU8sRUFBRTtJQUNQSixTQUFTLDRCQUFxQkwsT0FBTyxDQUFDVSxHQUFSLENBQVlQLElBQWpDO0VBREYsQ0FKd0M7RUFPakRRLFdBQVcsRUFBRTtJQUNYQyxLQUFLLEVBQUViLE1BQU0sQ0FBQ08sT0FBUCxDQUFlTztFQURYLENBUG9DO0VBVWpEQyxLQUFLLEVBQUU7SUFDTEMsT0FBTyxFQUFFLE1BREo7SUFFTFgsZUFBZSxFQUFFLE9BRlo7SUFHTEMsU0FBUyxzQkFBZU4sTUFBTSxDQUFDaUIsSUFBUCxDQUFZTSxHQUEzQjtFQUhKLENBVjBDO0VBZWpESCxRQUFRLEVBQUU7SUFDUmQsU0FBUyw0QkFBcUJOLE1BQU0sQ0FBQ08sT0FBUCxDQUFlRSxHQUFwQyxDQUREO0lBRVJKLGVBQWUsRUFBRUwsTUFBTSxDQUFDTyxPQUFQLENBQWVjO0VBRnhCO0FBZnVDLENBQTdCLENBQXRCO0FBcUJBbkIsV0FBVyxDQUFDc0IsWUFBWixHQUEyQjFCLE1BQU0sQ0FBQ0sscUJBQVAsQ0FBNkI7RUFDdERDLElBQUksRUFBRTtJQUNKQyxlQUFlLEVBQUVMLE1BQU0sQ0FBQ08sT0FBUCxDQUFlZTtFQUQ1QixDQURnRDtFQUl0RFosT0FBTyxFQUFFO0lBQ1BKLFNBQVMsNEJBQXFCTCxPQUFPLENBQUNVLEdBQVIsQ0FBWVAsSUFBakM7RUFERixDQUo2QztFQU90RFEsV0FBVyxFQUFFO0lBQ1hDLEtBQUssRUFBRWIsTUFBTSxDQUFDTyxPQUFQLENBQWVPO0VBRFgsQ0FQeUM7RUFVdERDLEtBQUssRUFBRTtJQUNMQyxPQUFPLEVBQUUsTUFESjtJQUVMWCxlQUFlLEVBQUUsT0FGWjtJQUdMQyxTQUFTLHNCQUFlTixNQUFNLENBQUNpQixJQUFQLENBQVlDLEVBQTNCO0VBSEosQ0FWK0M7RUFldERFLFFBQVEsRUFBRTtJQUNSZCxTQUFTLDRCQUFxQk4sTUFBTSxDQUFDTyxPQUFQLENBQWVFLEdBQXBDLENBREQ7SUFFUkosZUFBZSxFQUFFTCxNQUFNLENBQUNPLE9BQVAsQ0FBZWM7RUFGeEI7QUFmNEMsQ0FBN0IsQ0FBM0I7QUFxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxJQUFNSSxxQkFBcUIsR0FBRyxTQUF4QkEscUJBQXdCLENBQUFDLFVBQVUsRUFBSTtFQUMxQyxRQUFRQSxVQUFSO0lBQ0UsS0FBSyxTQUFMO01BQ0UsT0FBT3hCLFdBQVcsQ0FBQ0ssT0FBbkI7O0lBQ0YsS0FBSyxlQUFMO01BQ0UsT0FBT0wsV0FBVyxDQUFDc0IsWUFBbkI7O0lBQ0Y7TUFDRSxPQUFPdEIsV0FBVyxXQUFsQjtFQU5KO0FBUUQsQ0FURDtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLGVBQWVILGdCQUFnQixDQUFDMEIscUJBQUQsQ0FBL0IifQ==