import { Themer } from '../../../../themer';
import memoizeClassName from '../utils/memoizeClassName';
import scales from '../foundational-styles/scales';
import palette from '../foundational-styles/palette';
var InputAppearances = {};
InputAppearances["default"] = Themer.createInputAppearance({
  base: {
    backgroundColor: 'white',
    boxShadow: "inset 0 0 0 1px ".concat(scales.neutral.N5A, ", inset 0 1px 2px ").concat(scales.neutral.N4A)
  },
  invalid: {
    boxShadow: "inset 0 0 0 1px ".concat(palette.red.base, ", inset 0 1px 2px ").concat(scales.neutral.N4A)
  },
  placeholder: {
    color: scales.neutral.N6A
  },
  focus: {
    outline: 'none',
    boxShadow: "inset 0 0 2px ".concat(scales.neutral.N4A, ", inset 0 0 0 1px ").concat(scales.blue.B7, ", 0 0 0 3px ").concat(scales.blue.B4A)
  },
  disabled: {
    boxShadow: "inset 0 0 0 1px ".concat(scales.neutral.N4A),
    backgroundColor: scales.neutral.N2
  }
});
InputAppearances.neutral = Themer.createInputAppearance({
  base: {
    backgroundColor: scales.neutral.N2A
  },
  invalid: {
    boxShadow: "inset 0 0 0 1px ".concat(palette.red.base)
  },
  placeholder: {
    color: scales.neutral.N6A
  },
  focus: {
    outline: 'none',
    backgroundColor: 'white',
    boxShadow: "0 0 0 2px ".concat(scales.blue.B6A)
  },
  disabled: {
    boxShadow: "inset 0 0 0 1px ".concat(scales.neutral.N4A),
    backgroundColor: scales.neutral.N2
  }
});
InputAppearances.none = Themer.createInputAppearance({
  base: {
    backgroundColor: 'white'
  },
  invalid: {},
  placeholder: {
    color: scales.neutral.N6A
  },
  focus: {
    outline: 'none'
  },
  disabled: {
    backgroundColor: scales.neutral.N2
  }
});
/**
 * Get the appearance of a `TextInput`.
 * @param {string} appearance - the appearance name
 * @return {Object} the appearance object.
 */

var getTextInputAppearance = function getTextInputAppearance(appearance) {
  switch (appearance) {
    case 'neutral':
      return InputAppearances.neutral;

    case 'none':
      return InputAppearances.none;

    default:
      return InputAppearances["default"];
  }
};
/**
 * Get the className of a `TextInput`.
 * @param {string} appearance - the appearance name
 * @return {string} the appearance class name.
 */


export default memoizeClassName(getTextInputAppearance);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUaGVtZXIiLCJtZW1vaXplQ2xhc3NOYW1lIiwic2NhbGVzIiwicGFsZXR0ZSIsIklucHV0QXBwZWFyYW5jZXMiLCJjcmVhdGVJbnB1dEFwcGVhcmFuY2UiLCJiYXNlIiwiYmFja2dyb3VuZENvbG9yIiwiYm94U2hhZG93IiwibmV1dHJhbCIsIk41QSIsIk40QSIsImludmFsaWQiLCJyZWQiLCJwbGFjZWhvbGRlciIsImNvbG9yIiwiTjZBIiwiZm9jdXMiLCJvdXRsaW5lIiwiYmx1ZSIsIkI3IiwiQjRBIiwiZGlzYWJsZWQiLCJOMiIsIk4yQSIsIkI2QSIsIm5vbmUiLCJnZXRUZXh0SW5wdXRBcHBlYXJhbmNlIiwiYXBwZWFyYW5jZSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy90aGVtZS9zcmMvZGVmYXVsdC10aGVtZS9jb21wb25lbnQtc3BlY2lmaWMvZ2V0VGV4dElucHV0Q2xhc3NOYW1lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRoZW1lciB9IGZyb20gJy4uLy4uLy4uLy4uL3RoZW1lcidcbmltcG9ydCBtZW1vaXplQ2xhc3NOYW1lIGZyb20gJy4uL3V0aWxzL21lbW9pemVDbGFzc05hbWUnXG5pbXBvcnQgc2NhbGVzIGZyb20gJy4uL2ZvdW5kYXRpb25hbC1zdHlsZXMvc2NhbGVzJ1xuaW1wb3J0IHBhbGV0dGUgZnJvbSAnLi4vZm91bmRhdGlvbmFsLXN0eWxlcy9wYWxldHRlJ1xuXG5jb25zdCBJbnB1dEFwcGVhcmFuY2VzID0ge31cblxuSW5wdXRBcHBlYXJhbmNlcy5kZWZhdWx0ID0gVGhlbWVyLmNyZWF0ZUlucHV0QXBwZWFyYW5jZSh7XG4gIGJhc2U6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXG4gICAgYm94U2hhZG93OiBgaW5zZXQgMCAwIDAgMXB4ICR7c2NhbGVzLm5ldXRyYWwuTjVBfSwgaW5zZXQgMCAxcHggMnB4ICR7XG4gICAgICBzY2FsZXMubmV1dHJhbC5ONEFcbiAgICB9YFxuICB9LFxuICBpbnZhbGlkOiB7XG4gICAgYm94U2hhZG93OiBgaW5zZXQgMCAwIDAgMXB4ICR7cGFsZXR0ZS5yZWQuYmFzZX0sIGluc2V0IDAgMXB4IDJweCAke1xuICAgICAgc2NhbGVzLm5ldXRyYWwuTjRBXG4gICAgfWBcbiAgfSxcbiAgcGxhY2Vob2xkZXI6IHtcbiAgICBjb2xvcjogc2NhbGVzLm5ldXRyYWwuTjZBXG4gIH0sXG4gIGZvY3VzOiB7XG4gICAgb3V0bGluZTogJ25vbmUnLFxuICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAycHggJHtzY2FsZXMubmV1dHJhbC5ONEF9LCBpbnNldCAwIDAgMCAxcHggJHtcbiAgICAgIHNjYWxlcy5ibHVlLkI3XG4gICAgfSwgMCAwIDAgM3B4ICR7c2NhbGVzLmJsdWUuQjRBfWBcbiAgfSxcbiAgZGlzYWJsZWQ6IHtcbiAgICBib3hTaGFkb3c6IGBpbnNldCAwIDAgMCAxcHggJHtzY2FsZXMubmV1dHJhbC5ONEF9YCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHNjYWxlcy5uZXV0cmFsLk4yXG4gIH1cbn0pXG5cbklucHV0QXBwZWFyYW5jZXMubmV1dHJhbCA9IFRoZW1lci5jcmVhdGVJbnB1dEFwcGVhcmFuY2Uoe1xuICBiYXNlOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBzY2FsZXMubmV1dHJhbC5OMkFcbiAgfSxcbiAgaW52YWxpZDoge1xuICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAwIDFweCAke3BhbGV0dGUucmVkLmJhc2V9YFxuICB9LFxuICBwbGFjZWhvbGRlcjoge1xuICAgIGNvbG9yOiBzY2FsZXMubmV1dHJhbC5ONkFcbiAgfSxcbiAgZm9jdXM6IHtcbiAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICAgIGJveFNoYWRvdzogYDAgMCAwIDJweCAke3NjYWxlcy5ibHVlLkI2QX1gXG4gIH0sXG4gIGRpc2FibGVkOiB7XG4gICAgYm94U2hhZG93OiBgaW5zZXQgMCAwIDAgMXB4ICR7c2NhbGVzLm5ldXRyYWwuTjRBfWAsXG4gICAgYmFja2dyb3VuZENvbG9yOiBzY2FsZXMubmV1dHJhbC5OMlxuICB9XG59KVxuXG5JbnB1dEFwcGVhcmFuY2VzLm5vbmUgPSBUaGVtZXIuY3JlYXRlSW5wdXRBcHBlYXJhbmNlKHtcbiAgYmFzZToge1xuICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJ1xuICB9LFxuICBpbnZhbGlkOiB7fSxcbiAgcGxhY2Vob2xkZXI6IHtcbiAgICBjb2xvcjogc2NhbGVzLm5ldXRyYWwuTjZBXG4gIH0sXG4gIGZvY3VzOiB7XG4gICAgb3V0bGluZTogJ25vbmUnXG4gIH0sXG4gIGRpc2FibGVkOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBzY2FsZXMubmV1dHJhbC5OMlxuICB9XG59KVxuXG4vKipcbiAqIEdldCB0aGUgYXBwZWFyYW5jZSBvZiBhIGBUZXh0SW5wdXRgLlxuICogQHBhcmFtIHtzdHJpbmd9IGFwcGVhcmFuY2UgLSB0aGUgYXBwZWFyYW5jZSBuYW1lXG4gKiBAcmV0dXJuIHtPYmplY3R9IHRoZSBhcHBlYXJhbmNlIG9iamVjdC5cbiAqL1xuY29uc3QgZ2V0VGV4dElucHV0QXBwZWFyYW5jZSA9IGFwcGVhcmFuY2UgPT4ge1xuICBzd2l0Y2ggKGFwcGVhcmFuY2UpIHtcbiAgICBjYXNlICduZXV0cmFsJzpcbiAgICAgIHJldHVybiBJbnB1dEFwcGVhcmFuY2VzLm5ldXRyYWxcbiAgICBjYXNlICdub25lJzpcbiAgICAgIHJldHVybiBJbnB1dEFwcGVhcmFuY2VzLm5vbmVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIElucHV0QXBwZWFyYW5jZXMuZGVmYXVsdFxuICB9XG59XG5cbi8qKlxuICogR2V0IHRoZSBjbGFzc05hbWUgb2YgYSBgVGV4dElucHV0YC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBlYXJhbmNlIC0gdGhlIGFwcGVhcmFuY2UgbmFtZVxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgYXBwZWFyYW5jZSBjbGFzcyBuYW1lLlxuICovXG5leHBv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