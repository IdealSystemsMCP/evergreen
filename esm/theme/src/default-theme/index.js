/**
 * Theme
 * ---
 * The theme object is used to style Evergreen.
 * It is passed into the  `<ThemeProvider theme={theme} />`.
 * ----
 * You can use this as a template for your own themes.
 */

/**
 * Foundational Styles.
 * ---
 * The following properties are NOT REQUIRED by Evergreen.
 * It's exposed for convenience and documentation.
 */
import { colors, elevations, fills, palette, scales } from './foundational-styles';
/**
 * Typography.
 * ---
 * The following properties are NOT REQUIRED by Evergreen.
 * It's exposed for convenience and documentation.
 */

import { headings, text, fontFamilies, paragraph } from './typography';
/**
 * Component Specific.
 * ---
 * These ARE REQUIRED for Evergreen to work.
 */

import { avatarColors, badgeColors, spinnerColor, overlayBackgroundColor, getBadgeClassName, getButtonClassName, getLinkClassName, getCheckboxClassName, getRadioClassName, getTagInputClassName, getTextInputClassName, getTextareaClassName, getTextDropdownButtonClassName, getTabClassName, getTableCellClassName, getTooltipProps, getRowClassName, getMenuItemClassName, getSelectClassName, getSegmentedControlRadioClassName, getSwitchClassName, getAlertProps, getCodeProps, getAvatarProps, getBadgeProps, getAvatarInitialsFontSize } from './component-specific';
/**
 * Theme Helpers.
 * ---
 * These ARE REQUIRED for Evergreen to work.
 */

import { getBorderRadiusForControlHeight, getTextSizeForControlHeight, getIconSizeForButton, getIconSizeForInput, getIconSizeForSelect, getIconSizeForIconButton, getBackground, getElevation, getIconColor, getIconForIntent, getHeadingStyle, getTextStyle, getParagraphStyle, getFontFamily, getTextColor } from './theme-helpers';
export default {
  // Foundational Styles.
  colors: colors,
  elevations: elevations,
  fills: fills,
  palette: palette,
  scales: scales,
  // Component Specific.
  avatarColors: avatarColors,
  badgeColors: badgeColors,
  spinnerColor: spinnerColor,
  overlayBackgroundColor: overlayBackgroundColor,
  getBadgeClassName: getBadgeClassName,
  getButtonClassName: getButtonClassName,
  getLinkClassName: getLinkClassName,
  getCheckboxClassName: getCheckboxClassName,
  getRadioClassName: getRadioClassName,
  getTagInputClassName: getTagInputClassName,
  getTextInputClassName: getTextInputClassName,
  getTextareaClassName: getTextareaClassName,
  getTextDropdownButtonClassName: getTextDropdownButtonClassName,
  getTabClassName: getTabClassName,
  getTableCellClassName: getTableCellClassName,
  getTooltipProps: getTooltipProps,
  getRowClassName: getRowClassName,
  getMenuItemClassName: getMenuItemClassName,
  getSelectClassName: getSelectClassName,
  getSegmentedControlRadioClassName: getSegmentedControlRadioClassName,
  getSwitchClassName: getSwitchClassName,
  getAlertProps: getAlertProps,
  getCodeProps: getCodeProps,
  getAvatarProps: getAvatarProps,
  getBadgeProps: getBadgeProps,
  getAvatarInitialsFontSize: getAvatarInitialsFontSize,
  // Theme Helpers.
  getBorderRadiusForControlHeight: getBorderRadiusForControlHeight,
  getTextSizeForControlHeight: getTextSizeForControlHeight,
  getIconSizeForButton: getIconSizeForButton,
  getIconSizeForInput: getIconSizeForInput,
  getIconSizeForSelect: getIconSizeForSelect,
  getIconSizeForIconButton: getIconSizeForIconButton,
  getBackground: getBackground,
  getElevation: getElevation,
  getIconColor: getIconColor,
  getIconForIntent: getIconForIntent,
  getHeadingStyle: getHeadingStyle,
  getTextStyle: getTextStyle,
  getParagraphStyle: getParagraphStyle,
  getFontFamily: getFontFamily,
  getTextColor: getTextColor,
  typography: {
    headings: headings,
    text: text,
    fontFamilies: fontFamilies,
    paragraph: paragraph
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,